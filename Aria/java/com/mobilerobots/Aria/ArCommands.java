/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2017 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.Aria;

public class ArCommands {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ArCommands(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ArCommands obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        AriaJavaJNI.delete_ArCommands(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArCommands() {
    this(AriaJavaJNI.new_ArCommands(), true);
  }

  public final static class Commands {
    public final static ArCommands.Commands PULSE = new ArCommands.Commands("PULSE", AriaJavaJNI.ArCommands_PULSE_get());
    public final static ArCommands.Commands OPEN = new ArCommands.Commands("OPEN", AriaJavaJNI.ArCommands_OPEN_get());
    public final static ArCommands.Commands CLOSE = new ArCommands.Commands("CLOSE", AriaJavaJNI.ArCommands_CLOSE_get());
    public final static ArCommands.Commands POLLING = new ArCommands.Commands("POLLING", AriaJavaJNI.ArCommands_POLLING_get());
    public final static ArCommands.Commands ENABLE = new ArCommands.Commands("ENABLE", AriaJavaJNI.ArCommands_ENABLE_get());
    public final static ArCommands.Commands SETA = new ArCommands.Commands("SETA", AriaJavaJNI.ArCommands_SETA_get());
    public final static ArCommands.Commands SETV = new ArCommands.Commands("SETV", AriaJavaJNI.ArCommands_SETV_get());
    public final static ArCommands.Commands SETO = new ArCommands.Commands("SETO", AriaJavaJNI.ArCommands_SETO_get());
    public final static ArCommands.Commands MOVE = new ArCommands.Commands("MOVE", AriaJavaJNI.ArCommands_MOVE_get());
    public final static ArCommands.Commands ROTATE = new ArCommands.Commands("ROTATE", AriaJavaJNI.ArCommands_ROTATE_get());
    public final static ArCommands.Commands SETRV = new ArCommands.Commands("SETRV", AriaJavaJNI.ArCommands_SETRV_get());
    public final static ArCommands.Commands VEL = new ArCommands.Commands("VEL", AriaJavaJNI.ArCommands_VEL_get());
    public final static ArCommands.Commands HEAD = new ArCommands.Commands("HEAD", AriaJavaJNI.ArCommands_HEAD_get());
    public final static ArCommands.Commands DHEAD = new ArCommands.Commands("DHEAD", AriaJavaJNI.ArCommands_DHEAD_get());
    public final static ArCommands.Commands SAY = new ArCommands.Commands("SAY", AriaJavaJNI.ArCommands_SAY_get());
    public final static ArCommands.Commands JOYINFO = new ArCommands.Commands("JOYINFO", AriaJavaJNI.ArCommands_JOYINFO_get());
    public final static ArCommands.Commands CONFIG = new ArCommands.Commands("CONFIG", AriaJavaJNI.ArCommands_CONFIG_get());
    public final static ArCommands.Commands ENCODER = new ArCommands.Commands("ENCODER", AriaJavaJNI.ArCommands_ENCODER_get());
    public final static ArCommands.Commands SETRVDIR = new ArCommands.Commands("SETRVDIR", AriaJavaJNI.ArCommands_SETRVDIR_get());
    public final static ArCommands.Commands RVEL = new ArCommands.Commands("RVEL", AriaJavaJNI.ArCommands_RVEL_get());
    public final static ArCommands.Commands DCHEAD = new ArCommands.Commands("DCHEAD", AriaJavaJNI.ArCommands_DCHEAD_get());
    public final static ArCommands.Commands SETRA = new ArCommands.Commands("SETRA", AriaJavaJNI.ArCommands_SETRA_get());
    public final static ArCommands.Commands IMUREQUEST = new ArCommands.Commands("IMUREQUEST", AriaJavaJNI.ArCommands_IMUREQUEST_get());
    public final static ArCommands.Commands SEEKURIMU = new ArCommands.Commands("SEEKURIMU", AriaJavaJNI.ArCommands_SEEKURIMU_get());
    public final static ArCommands.Commands SONAR = new ArCommands.Commands("SONAR", AriaJavaJNI.ArCommands_SONAR_get());
    public final static ArCommands.Commands STOP = new ArCommands.Commands("STOP", AriaJavaJNI.ArCommands_STOP_get());
    public final static ArCommands.Commands DIGOUT = new ArCommands.Commands("DIGOUT", AriaJavaJNI.ArCommands_DIGOUT_get());
    public final static ArCommands.Commands VEL2 = new ArCommands.Commands("VEL2", AriaJavaJNI.ArCommands_VEL2_get());
    public final static ArCommands.Commands GRIPPER = new ArCommands.Commands("GRIPPER", AriaJavaJNI.ArCommands_GRIPPER_get());
    public final static ArCommands.Commands ADSEL = new ArCommands.Commands("ADSEL", AriaJavaJNI.ArCommands_ADSEL_get());
    public final static ArCommands.Commands GRIPPERVAL = new ArCommands.Commands("GRIPPERVAL", AriaJavaJNI.ArCommands_GRIPPERVAL_get());
    public final static ArCommands.Commands GRIPPERPACREQUEST = new ArCommands.Commands("GRIPPERPACREQUEST", AriaJavaJNI.ArCommands_GRIPPERPACREQUEST_get());
    public final static ArCommands.Commands IOREQUEST = new ArCommands.Commands("IOREQUEST", AriaJavaJNI.ArCommands_IOREQUEST_get());
    public final static ArCommands.Commands PTUPOS = new ArCommands.Commands("PTUPOS", AriaJavaJNI.ArCommands_PTUPOS_get());
    public final static ArCommands.Commands TTY2 = new ArCommands.Commands("TTY2", AriaJavaJNI.ArCommands_TTY2_get());
    public final static ArCommands.Commands GETAUX = new ArCommands.Commands("GETAUX", AriaJavaJNI.ArCommands_GETAUX_get());
    public final static ArCommands.Commands BUMPSTALL = new ArCommands.Commands("BUMPSTALL", AriaJavaJNI.ArCommands_BUMPSTALL_get());
    public final static ArCommands.Commands TCM2 = new ArCommands.Commands("TCM2", AriaJavaJNI.ArCommands_TCM2_get());
    public final static ArCommands.Commands JOYDRIVE = new ArCommands.Commands("JOYDRIVE", AriaJavaJNI.ArCommands_JOYDRIVE_get());
    public final static ArCommands.Commands MOVINGBLINK = new ArCommands.Commands("MOVINGBLINK", AriaJavaJNI.ArCommands_MOVINGBLINK_get());
    public final static ArCommands.Commands HOSTBAUD = new ArCommands.Commands("HOSTBAUD", AriaJavaJNI.ArCommands_HOSTBAUD_get());
    public final static ArCommands.Commands AUX1BAUD = new ArCommands.Commands("AUX1BAUD", AriaJavaJNI.ArCommands_AUX1BAUD_get());
    public final static ArCommands.Commands AUX2BAUD = new ArCommands.Commands("AUX2BAUD", AriaJavaJNI.ArCommands_AUX2BAUD_get());
    public final static ArCommands.Commands ESTOP = new ArCommands.Commands("ESTOP", AriaJavaJNI.ArCommands_ESTOP_get());
    public final static ArCommands.Commands ESTALL = new ArCommands.Commands("ESTALL", AriaJavaJNI.ArCommands_ESTALL_get());
    public final static ArCommands.Commands GYRO = new ArCommands.Commands("GYRO", AriaJavaJNI.ArCommands_GYRO_get());
    public final static ArCommands.Commands TTY4 = new ArCommands.Commands("TTY4", AriaJavaJNI.ArCommands_TTY4_get());
    public final static ArCommands.Commands GETAUX3 = new ArCommands.Commands("GETAUX3", AriaJavaJNI.ArCommands_GETAUX3_get());
    public final static ArCommands.Commands BATTERYINFO = new ArCommands.Commands("BATTERYINFO", AriaJavaJNI.ArCommands_BATTERYINFO_get());
    public final static ArCommands.Commands TTY3 = new ArCommands.Commands("TTY3", AriaJavaJNI.ArCommands_TTY3_get());
    public final static ArCommands.Commands GETAUX2 = new ArCommands.Commands("GETAUX2", AriaJavaJNI.ArCommands_GETAUX2_get());
    public final static ArCommands.Commands BATTEST = new ArCommands.Commands("BATTEST", AriaJavaJNI.ArCommands_BATTEST_get());
    public final static ArCommands.Commands LOADPARAM = new ArCommands.Commands("LOADPARAM", AriaJavaJNI.ArCommands_LOADPARAM_get());
    public final static ArCommands.Commands OLDSIM_LOADPARAM = new ArCommands.Commands("OLDSIM_LOADPARAM", AriaJavaJNI.ArCommands_OLDSIM_LOADPARAM_get());
    public final static ArCommands.Commands ENDSIM = new ArCommands.Commands("ENDSIM", AriaJavaJNI.ArCommands_ENDSIM_get());
    public final static ArCommands.Commands OLDSIM_EXIT = new ArCommands.Commands("OLDSIM_EXIT", AriaJavaJNI.ArCommands_OLDSIM_EXIT_get());
    public final static ArCommands.Commands LOADWORLD = new ArCommands.Commands("LOADWORLD", AriaJavaJNI.ArCommands_LOADWORLD_get());
    public final static ArCommands.Commands OLDSIM_LOADWORLD = new ArCommands.Commands("OLDSIM_LOADWORLD", AriaJavaJNI.ArCommands_OLDSIM_LOADWORLD_get());
    public final static ArCommands.Commands STEP = new ArCommands.Commands("STEP", AriaJavaJNI.ArCommands_STEP_get());
    public final static ArCommands.Commands OLDSIM_STEP = new ArCommands.Commands("OLDSIM_STEP", AriaJavaJNI.ArCommands_OLDSIM_STEP_get());
    public final static ArCommands.Commands CALCOMP = new ArCommands.Commands("CALCOMP", AriaJavaJNI.ArCommands_CALCOMP_get());
    public final static ArCommands.Commands SETSIMORIGINTH = new ArCommands.Commands("SETSIMORIGINTH", AriaJavaJNI.ArCommands_SETSIMORIGINTH_get());
    public final static ArCommands.Commands OLDSIM_SETORIGINTH = new ArCommands.Commands("OLDSIM_SETORIGINTH", AriaJavaJNI.ArCommands_OLDSIM_SETORIGINTH_get());
    public final static ArCommands.Commands RESETSIMTOORIGIN = new ArCommands.Commands("RESETSIMTOORIGIN", AriaJavaJNI.ArCommands_RESETSIMTOORIGIN_get());
    public final static ArCommands.Commands OLDSIM_RESETTOORIGIN = new ArCommands.Commands("OLDSIM_RESETTOORIGIN", AriaJavaJNI.ArCommands_OLDSIM_RESETTOORIGIN_get());
    public final static ArCommands.Commands SOUND = new ArCommands.Commands("SOUND", AriaJavaJNI.ArCommands_SOUND_get());
    public final static ArCommands.Commands PLAYLIST = new ArCommands.Commands("PLAYLIST", AriaJavaJNI.ArCommands_PLAYLIST_get());
    public final static ArCommands.Commands SOUNDTOG = new ArCommands.Commands("SOUNDTOG", AriaJavaJNI.ArCommands_SOUNDTOG_get());
    public final static ArCommands.Commands POWER_PC = new ArCommands.Commands("POWER_PC", AriaJavaJNI.ArCommands_POWER_PC_get());
    public final static ArCommands.Commands POWER_LRF = new ArCommands.Commands("POWER_LRF", AriaJavaJNI.ArCommands_POWER_LRF_get());
    public final static ArCommands.Commands POWER_5V = new ArCommands.Commands("POWER_5V", AriaJavaJNI.ArCommands_POWER_5V_get());
    public final static ArCommands.Commands POWER_12V = new ArCommands.Commands("POWER_12V", AriaJavaJNI.ArCommands_POWER_12V_get());
    public final static ArCommands.Commands POWER_24V = new ArCommands.Commands("POWER_24V", AriaJavaJNI.ArCommands_POWER_24V_get());
    public final static ArCommands.Commands LATVEL = new ArCommands.Commands("LATVEL", AriaJavaJNI.ArCommands_LATVEL_get());
    public final static ArCommands.Commands LATACCEL = new ArCommands.Commands("LATACCEL", AriaJavaJNI.ArCommands_LATACCEL_get());
    public final static ArCommands.Commands SETLATV = new ArCommands.Commands("SETLATV", AriaJavaJNI.ArCommands_SETLATV_get());
    public final static ArCommands.Commands RECENTERWHEELS = new ArCommands.Commands("RECENTERWHEELS", AriaJavaJNI.ArCommands_RECENTERWHEELS_get());
    public final static ArCommands.Commands ACCELINFO = new ArCommands.Commands("ACCELINFO", AriaJavaJNI.ArCommands_ACCELINFO_get());
    public final static ArCommands.Commands TORQUEINFO = new ArCommands.Commands("TORQUEINFO", AriaJavaJNI.ArCommands_TORQUEINFO_get());
    public final static ArCommands.Commands POWER_AUX_PC = new ArCommands.Commands("POWER_AUX_PC", AriaJavaJNI.ArCommands_POWER_AUX_PC_get());
    public final static ArCommands.Commands POWER_TOUCHSCREEN = new ArCommands.Commands("POWER_TOUCHSCREEN", AriaJavaJNI.ArCommands_POWER_TOUCHSCREEN_get());
    public final static ArCommands.Commands POWER_PTZ = new ArCommands.Commands("POWER_PTZ", AriaJavaJNI.ArCommands_POWER_PTZ_get());
    public final static ArCommands.Commands POWER_AUDIO = new ArCommands.Commands("POWER_AUDIO", AriaJavaJNI.ArCommands_POWER_AUDIO_get());
    public final static ArCommands.Commands POWER_LRF2 = new ArCommands.Commands("POWER_LRF2", AriaJavaJNI.ArCommands_POWER_LRF2_get());
    public final static ArCommands.Commands HEADINGINFO = new ArCommands.Commands("HEADINGINFO", AriaJavaJNI.ArCommands_HEADINGINFO_get());
    public final static ArCommands.Commands ROTVEL_CLOSEDLOOP_ENABLE = new ArCommands.Commands("ROTVEL_CLOSEDLOOP_ENABLE", AriaJavaJNI.ArCommands_ROTVEL_CLOSEDLOOP_ENABLE_get());
    public final static ArCommands.Commands SRECORD = new ArCommands.Commands("SRECORD", AriaJavaJNI.ArCommands_SRECORD_get());
    public final static ArCommands.Commands MARCDEBUG = new ArCommands.Commands("MARCDEBUG", AriaJavaJNI.ArCommands_MARCDEBUG_get());
    public final static ArCommands.Commands WHEEL_LIGHT = new ArCommands.Commands("WHEEL_LIGHT", AriaJavaJNI.ArCommands_WHEEL_LIGHT_get());
    public final static ArCommands.Commands ABSOLUTE_MAXES = new ArCommands.Commands("ABSOLUTE_MAXES", AriaJavaJNI.ArCommands_ABSOLUTE_MAXES_get());
    public final static ArCommands.Commands SAFETY_STATE_INFO = new ArCommands.Commands("SAFETY_STATE_INFO", AriaJavaJNI.ArCommands_SAFETY_STATE_INFO_get());
    public final static ArCommands.Commands SAFETY_SET_STATE = new ArCommands.Commands("SAFETY_SET_STATE", AriaJavaJNI.ArCommands_SAFETY_SET_STATE_get());
    public final static ArCommands.Commands SAFETY_DISABLE_POWER_OFF_TIMER = new ArCommands.Commands("SAFETY_DISABLE_POWER_OFF_TIMER", AriaJavaJNI.ArCommands_SAFETY_DISABLE_POWER_OFF_TIMER_get());
    public final static ArCommands.Commands SAFETY_ZONE_ACTIVE = new ArCommands.Commands("SAFETY_ZONE_ACTIVE", AriaJavaJNI.ArCommands_SAFETY_ZONE_ACTIVE_get());
    public final static ArCommands.Commands WHEELINFO_REQUEST = new ArCommands.Commands("WHEELINFO_REQUEST", AriaJavaJNI.ArCommands_WHEELINFO_REQUEST_get());
    public final static ArCommands.Commands MARC_CONFIG_SET = new ArCommands.Commands("MARC_CONFIG_SET", AriaJavaJNI.ArCommands_MARC_CONFIG_SET_get());
    public final static ArCommands.Commands MARC_CONFIG_GET = new ArCommands.Commands("MARC_CONFIG_GET", AriaJavaJNI.ArCommands_MARC_CONFIG_GET_get());
    public final static ArCommands.Commands SIM_SET_POSE = new ArCommands.Commands("SIM_SET_POSE", AriaJavaJNI.ArCommands_SIM_SET_POSE_get());
    public final static ArCommands.Commands SIM_RESET = new ArCommands.Commands("SIM_RESET", AriaJavaJNI.ArCommands_SIM_RESET_get());
    public final static ArCommands.Commands SIM_MODEL_CONFIG = new ArCommands.Commands("SIM_MODEL_CONFIG", AriaJavaJNI.ArCommands_SIM_MODEL_CONFIG_get());
    public final static ArCommands.Commands SIM_LRF_ENABLE = new ArCommands.Commands("SIM_LRF_ENABLE", AriaJavaJNI.ArCommands_SIM_LRF_ENABLE_get());
    public final static ArCommands.Commands SIM_LRF_SET_FOV_START = new ArCommands.Commands("SIM_LRF_SET_FOV_START", AriaJavaJNI.ArCommands_SIM_LRF_SET_FOV_START_get());
    public final static ArCommands.Commands SIM_LRF_SET_FOV_END = new ArCommands.Commands("SIM_LRF_SET_FOV_END", AriaJavaJNI.ArCommands_SIM_LRF_SET_FOV_END_get());
    public final static ArCommands.Commands SIM_LRF_SET_RES = new ArCommands.Commands("SIM_LRF_SET_RES", AriaJavaJNI.ArCommands_SIM_LRF_SET_RES_get());
    public final static ArCommands.Commands SIM_CTRL = new ArCommands.Commands("SIM_CTRL", AriaJavaJNI.ArCommands_SIM_CTRL_get());
    public final static ArCommands.Commands SIM_STAT = new ArCommands.Commands("SIM_STAT", AriaJavaJNI.ArCommands_SIM_STAT_get());
    public final static ArCommands.Commands SIM_MESSAGE = new ArCommands.Commands("SIM_MESSAGE", AriaJavaJNI.ArCommands_SIM_MESSAGE_get());
    public final static ArCommands.Commands SIM_EXIT = new ArCommands.Commands("SIM_EXIT", AriaJavaJNI.ArCommands_SIM_EXIT_get());
    public final static ArCommands.Commands POWERONLIKE_RESET = new ArCommands.Commands("POWERONLIKE_RESET", AriaJavaJNI.ArCommands_POWERONLIKE_RESET_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Commands swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Commands.class + " with value " + swigValue);
    }

    private Commands(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Commands(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Commands(String swigName, Commands swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Commands[] swigValues = { PULSE, OPEN, CLOSE, POLLING, ENABLE, SETA, SETV, SETO, MOVE, ROTATE, SETRV, VEL, HEAD, DHEAD, SAY, JOYINFO, CONFIG, ENCODER, SETRVDIR, RVEL, DCHEAD, SETRA, IMUREQUEST, SEEKURIMU, SONAR, STOP, DIGOUT, VEL2, GRIPPER, ADSEL, GRIPPERVAL, GRIPPERPACREQUEST, IOREQUEST, PTUPOS, TTY2, GETAUX, BUMPSTALL, TCM2, JOYDRIVE, MOVINGBLINK, HOSTBAUD, AUX1BAUD, AUX2BAUD, ESTOP, ESTALL, GYRO, TTY4, GETAUX3, BATTERYINFO, TTY3, GETAUX2, BATTEST, LOADPARAM, OLDSIM_LOADPARAM, ENDSIM, OLDSIM_EXIT, LOADWORLD, OLDSIM_LOADWORLD, STEP, OLDSIM_STEP, CALCOMP, SETSIMORIGINTH, OLDSIM_SETORIGINTH, RESETSIMTOORIGIN, OLDSIM_RESETTOORIGIN, SOUND, PLAYLIST, SOUNDTOG, POWER_PC, POWER_LRF, POWER_5V, POWER_12V, POWER_24V, LATVEL, LATACCEL, SETLATV, RECENTERWHEELS, ACCELINFO, TORQUEINFO, POWER_AUX_PC, POWER_TOUCHSCREEN, POWER_PTZ, POWER_AUDIO, POWER_LRF2, HEADINGINFO, ROTVEL_CLOSEDLOOP_ENABLE, SRECORD, MARCDEBUG, WHEEL_LIGHT, ABSOLUTE_MAXES, SAFETY_STATE_INFO, SAFETY_SET_STATE, SAFETY_DISABLE_POWER_OFF_TIMER, SAFETY_ZONE_ACTIVE, WHEELINFO_REQUEST, MARC_CONFIG_SET, MARC_CONFIG_GET, SIM_SET_POSE, SIM_RESET, SIM_MODEL_CONFIG, SIM_LRF_ENABLE, SIM_LRF_SET_FOV_START, SIM_LRF_SET_FOV_END, SIM_LRF_SET_RES, SIM_CTRL, SIM_STAT, SIM_MESSAGE, SIM_EXIT, POWERONLIKE_RESET };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
